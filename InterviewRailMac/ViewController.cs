// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using UI.Utils;
using ReactiveUI;
using System.Reactive.Linq;
using UI.Model;
using System.Collections.ObjectModel;
using DynamicData.Binding;
using System.Reactive.Disposables;
using System.Linq;

namespace UI
{
    public partial class FavoriteOutlineDelegate : NSOutlineViewDelegate
    {
        #region Constants
        private const string StationNameCell = @"StationNameCell";
        private const string DestinationCell = @"DestinationCell";
        private const string EstimatedArrivalTimeCell = @"EstimatedArrivalTimeCell";
        #endregion

        #region Private Variables
        private FavoriteOutlineViewDataSource DataSource;
        #endregion

        #region Constructors
        public FavoriteOutlineDelegate(FavoriteOutlineViewDataSource datasource)
        {
            this.DataSource = datasource;
        }
        #endregion

        #region Override Methods
        public override NSView GetView(NSOutlineView outlineView, NSTableColumn tableColumn, NSObject item)
        {
            NSTextField view = null;

            // Setup view based on the column selected
            switch (tableColumn.Identifier)
            {
                case "StationNameColumn":
                     view = (NSTextField)outlineView.MakeView(StationNameCell, this);
                    if (view == null)
                    {
                        view = new NSTextField();
                        view.Identifier = StationNameCell;
                        view.BackgroundColor = NSColor.Clear;
                        view.Bordered = false;
                        view.Selectable = false;
                        view.Editable = false;
                    }

                    // Cast item
                    var stationModelStationDesc = item as FavoriteStation;
                    var Stationfullname = stationModelStationDesc?.Stationfullname;
                    view.StringValue = Stationfullname == null ? ((StationData)item).Traincode : Stationfullname;
                    break;
                case "DestinationColumn":
                     view = (NSTextField)outlineView.MakeView(DestinationCell, this);
                    if (view == null)
                    {
                        view = new NSTextField();
                        view.Identifier = StationNameCell;
                        view.BackgroundColor = NSColor.Clear;
                        view.Bordered = false;
                        view.Selectable = false;
                        view.Editable = false;
                    }

                    // Cast item
                    var stationDataDestination = item as StationData;
                    var Destination = stationDataDestination?.Destination;
                    view.StringValue = Destination == null ? string.Empty : Destination;
                    break;
                case "EstimatedArrivalTimeColumn":
                     view = (NSTextField)outlineView.MakeView(EstimatedArrivalTimeCell, this);
                    if (view == null)
                    {
                        view = new NSTextField();
                        view.Identifier = StationNameCell;
                        view.BackgroundColor = NSColor.Clear;
                        view.Bordered = false;
                        view.Selectable = false;
                        view.Editable = false;
                    }

                    // Cast item
                    var stationDataExparrival = item as StationData;
                    var Exparrival = stationDataExparrival?.Exparrival;
                    view.StringValue = Exparrival == null ? string.Empty : Exparrival;
                    break;
            }

            return view;
        }

        public override bool ShouldSelectItem(NSOutlineView outlineView, NSObject item)
        {
            var favoriteStation = item as FavoriteStation;
            return favoriteStation != null ? favoriteStation.StationData.Count > 0 ? true : false : false;
        }
        #endregion
    }

    public partial class FavoriteOutlineViewDataSource : NSOutlineViewDataSource
    {
        private readonly ReadOnlyObservableCollection<FavoriteStation> _stationData;

        public FavoriteOutlineViewDataSource(ReadOnlyObservableCollection<FavoriteStation> stationData, NSOutlineView outlineView)
        {
            _stationData = stationData;
            _stationData
                .ToObservableChangeSet()
                .Subscribe(_ => outlineView.ReloadData());
        }
        public override nint GetChildrenCount(NSOutlineView outlineView, NSObject item)
        {
            if (item == null)
            {
                return _stationData.Count;
            }
            else
            {
                var favoriteStation = item as FavoriteStation;
                if (favoriteStation != null)
                    return ((FavoriteStation)item).StationData.Count; //FavoriteStation
                else
                    return 1; //StationData
            }
        }

        public override NSObject GetChild(NSOutlineView outlineView, nint childIndex, NSObject item)
        {
            if (item == null)
            {
                return _stationData[(int)childIndex];
            }
            else
            {
                var favoriteStation = item as FavoriteStation;
                if (favoriteStation != null)
                    return favoriteStation.StationData[(int)childIndex];
                else
                    return (StationData)item;
            }
        }

        public override bool ItemExpandable(NSOutlineView outlineView, NSObject item)
        {
            var favoriteStation = item as FavoriteStation;
            return favoriteStation != null ? favoriteStation.StationData.Count > 0 ? true : false : false;
        }

    }
    public partial class ViewController : ViewControllerBase<ViewModel>
	{
		public ViewController(IntPtr handle) : base(handle)
		{
            ViewModel = new ViewModel();
            this.WhenActivated(disposables =>
            {
                this.WhenAnyValue(x => x.ViewModel)
                    .Where(x => x != null)
                    .Do(PopulateFromViewModel)
                    .Subscribe()
                    .DisposeWith(disposables);
            });
        }

        private void PopulateFromViewModel(ViewModel viewModel)
        {
            _favoriteOutlineView.DataSource = new FavoriteOutlineViewDataSource(viewModel.StationData, _favoriteOutlineView);
            _favoriteOutlineView.Delegate = new FavoriteOutlineDelegate((FavoriteOutlineViewDataSource)_favoriteOutlineView.DataSource);
        }
    }
}
